#pragma once
#include <conio.h>	//_kbhit(), _getch()
#include <iostream>
#include <vector>
#include <queue>




class Q1012 {
	int T, N, M, K;
	bool** field;
	bool** visited;
	int result = 0;
	int dy[4] = { 1,0,-1,0 };
	int dx[4] = { 0,1,0,-1 };
public:
	void run();
private:
	void DFS_solution();
	void DFS(int y, int x);
	void BFS();
};

class Q1197 {
	struct Edge {
		int v1, v2, w;
		bool operator<(Edge& e) {
			return w < e.w;
		}
	};
	int V, E;
	std::vector<Edge> edge;
public:
	void run();



private:
	//최소스패닝트리(모든 노드를 포함하면서, 순환되지 않는 무방향 그래프)
	//kruskal(크루스칼 알고리즘)
	/*
	1.간선의 크기를 기준으로 MST(최소스패닝트리) 오름차순 정렬
	2.간선을 하나씩 꺼내가면서 사이클이 발생하는지 확인(같은 부모노드를 가지고 있으면 넘기고 다른 부모노드를 가지고 있으면 Unoin 한다)
	*/
	int getParent(int* prente, int x);				//부모노드를 가져옴
	bool sameParent(int* parent, int x, int y);		//같은 부모를 가졌는지 확인		
	void Union(int* parent, int v1, int v2);		//부모노드 결합

	//prim(프림 알고리즘)
	//하아 이건 또 언제 하냐

};

class Q1753 {
	//다익스트라
/*
문제
방향그래프가 주어지면 주어진 시작점에서 다른 모든 정점으로의 최단 경로를 구하는 프로그램을 작성하시오. 단, 모든 간선의 가중치는 10 이하의 자연수이다.

입력
첫째 줄에 정점의 개수 V와 간선의 개수 E가 주어진다. (1≤V≤20,000, 1≤E≤300,000) 모든 정점에는 1부터 V까지 번호가 매겨져 있다고 가정한다. 둘째 줄에는 시작 정점의 번호 K(1≤K≤V)가 주어진다. 셋째 줄부터 E개의 줄에 걸쳐 각 간선을 나타내는 세 개의 정수 (u, v, w)가 순서대로 주어진다. 이는 u에서 v로 가는 가중치 w인 간선이 존재한다는 뜻이다. u와 v는 서로 다르며 w는 10 이하의 자연수이다. 서로 다른 두 정점 사이에 여러 개의 간선이 존재할 수도 있음에 유의한다.

출력
첫째 줄부터 V개의 줄에 걸쳐, i번째 줄에 i번 정점으로의 최단 경로의 경로값을 출력한다. 시작점 자신은 0으로 출력하고, 경로가 존재하지 않는 경우에는 INF를 출력하면 된다.
	
예제 입력 1 
5 6
1
5 1 1
1 2 2
1 3 3
2 3 4
2 4 5
3 4 6
예제 출력 1 
0
2
3
7
INF
*/
	int V, E;
	struct Node {
		int to;
		int w;
		bool operator<(const Node& b) const {
			return w > b.w;
		}
	};
	//https://untitle-ssu.tistory.com/80
	//동적할당
	std::vector<Node>* w_graph;	//vector는 malloc으로 할당 하면 ㅄ 이다
	int* dist;
public:	
	void run();
private:
	//BFS기반
	void dijkstra(int start);

};

class Q2178 {
	//https://www.acmicpc.net/problem/2178
	struct info {
		bool road;		//벽과 길 판단
		int visited;	//방문 여부 & 최단거리 기록
	};
	int N, M;
	info** maze;
public:
	void run();
private:
	void BFS();
};

class Q2644 {
	//촌수계산
	/*
	문제
	우리 나라는 가족 혹은 친척들 사이의 관계를 촌수라는 단위로 표현하는 독특한 문화를 가지고 있다. 이러한 촌수는 다음과 같은 방식으로 계산된다. 기본적으로 부모와 자식 사이를 1촌으로 정의하고 이로부터 사람들 간의 촌수를 계산한다. 예를 들면 나와 아버지, 아버지와 할아버지는 각각 1촌으로 나와 할아버지는 2촌이 되고, 아버지 형제들과 할아버지는 1촌, 나와 아버지 형제들과는 3촌이 된다.

	여러 사람들에 대한 부모 자식들 간의 관계가 주어졌을 때, 주어진 두 사람의 촌수를 계산하는 프로그램을 작성하시오.

	입력
	사람들은 1, 2, 3, …, n (1 ≤ n ≤ 100)의 연속된 번호로 각각 표시된다. 입력 파일의 첫째 줄에는 전체 사람의 수 n이 주어지고, 둘째 줄에는 촌수를 계산해야 하는 서로 다른 두 사람의 번호가 주어진다. 그리고 셋째 줄에는 부모 자식들 간의 관계의 개수 m이 주어진다. 넷째 줄부터는 부모 자식간의 관계를 나타내는 두 번호 x,y가 각 줄에 나온다. 이때 앞에 나오는 번호 x는 뒤에 나오는 정수 y의 부모 번호를 나타낸다.

	각 사람의 부모는 최대 한 명만 주어진다.

	출력
	입력에서 요구한 두 사람의 촌수를 나타내는 정수를 출력한다. 어떤 경우에는 두 사람의 친척 관계가 전혀 없어 촌수를 계산할 수 없을 때가 있다. 이때에는 -1을 출력해야 한다.

	예제 입력 1
	9
	7 3
	7
	1 2
	1 3
	2 7
	2 8
	2 9
	4 5
	4 6
	예제 출력 1
	3
	*/
public:
	void run();

private:
	void family_tree_DFS(std::vector<int>* v, bool* visited, int p, int c, int cnt, int* result);
	int family_tree_BFS(std::vector<int>* v, int* dist, int start, int end);
};

class Q11725 {
	//트리의 부모찾기
	/*
	문제
	루트 없는 트리가 주어진다. 이때, 트리의 루트를 1이라고 정했을 때, 각 노드의 부모를 구하는 프로그램을 작성하시오.

	입력
	첫째 줄에 노드의 개수 N (2 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N-1개의 줄에 트리 상에서 연결된 두 정점이 주어진다.

	출력
	첫째 줄부터 N-1개의 줄에 각 노드의 부모 노드 번호를 2번 노드부터 순서대로 출력한다.

	예제 입력 1
	7
	1 6
	6 3
	3 5
	4 1
	2 4
	4 7
	예제 출력 1
	4
	6
	1
	3
	1
	4
	*/

public:
	void run();
private:
	void findParent_DFS(std::vector<int>* v, bool* visited, int* parent, int x);
};


//미완료

class Q13460 {
//https://www.acmicpc.net/problem/13460
//문제
/*
문제
스타트링크에서 판매하는 어린이용 장난감 중에서 가장 인기가 많은 제품은 구슬 탈출이다. 구슬 탈출은 직사각형 보드에 빨간 구슬과 파란 구슬을 하나씩 넣은 다음, 빨간 구슬을 구멍을 통해 빼내는 게임이다.
보드의 세로 크기는 N, 가로 크기는 M이고, 편의상 1×1크기의 칸으로 나누어져 있다. 가장 바깥 행과 열은 모두 막혀져 있고, 보드에는 구멍이 하나 있다. 빨간 구슬과 파란 구슬의 크기는 보드에서 1×1크기의 칸을 가득 채우는 사이즈이고, 각각 하나씩 들어가 있다. 게임의 목표는 빨간 구슬을 구멍을 통해서 빼내는 것이다. 이때, 파란 구슬이 구멍에 들어가면 안 된다.
이때, 구슬을 손으로 건드릴 수는 없고, 중력을 이용해서 이리 저리 굴려야 한다. 왼쪽으로 기울이기, 오른쪽으로 기울이기, 위쪽으로 기울이기, 아래쪽으로 기울이기와 같은 네 가지 동작이 가능하다.
각각의 동작에서 공은 동시에 움직인다. 빨간 구슬이 구멍에 빠지면 성공이지만, 파란 구슬이 구멍에 빠지면 실패이다. 빨간 구슬과 파란 구슬이 동시에 구멍에 빠져도 실패이다. 빨간 구슬과 파란 구슬은 동시에 같은 칸에 있을 수 없다. 또, 빨간 구슬과 파란 구슬의 크기는 한 칸을 모두 차지한다. 기울이는 동작을 그만하는 것은 더 이상 구슬이 움직이지 않을 때 까지이다.
보드의 상태가 주어졌을 때, 최소 몇 번 만에 빨간 구슬을 구멍을 통해 빼낼 수 있는지 구하는 프로그램을 작성하시오.

입력
첫 번째 줄에는 보드의 세로, 가로 크기를 의미하는 두 정수 N, M (3 ≤ N, M ≤ 10)이 주어진다. 다음 N개의 줄에 보드의 모양을 나타내는 길이 M의 문자열이 주어진다. 이 문자열은 '.', '#', 'O', 'R', 'B' 로 이루어져 있다. '.'은 빈 칸을 의미하고, '#'은 공이 이동할 수 없는 장애물 또는 벽을 의미하며, 'O'는 구멍의 위치를 의미한다. 'R'은 빨간 구슬의 위치, 'B'는 파란 구슬의 위치이다.
입력되는 모든 보드의 가장자리에는 모두 '#'이 있다. 구멍의 개수는 한 개 이며, 빨간 구슬과 파란 구슬은 항상 1개가 주어진다.

출력
최소 몇 번 만에 빨간 구슬을 구멍을 통해 빼낼 수 있는지 출력한다. 만약, 10번 이하로 움직여서 빨간 구슬을 구멍을 통해 빼낼 수 없으면 -1을 출력한다.
*/
//예제
/*
예제 입력 1 
5 5
#####
#..B#
#.#.#
#RO.#
#####
예제 출력 1 
1
예제 입력 2 
7 7
#######
#...RB#
#.#####
#.....#
#####.#
#O....#
#######
예제 출력 2 
5
예제 입력 3 
7 7
#######
#..R#B#
#.#####
#.....#
#####.#
#O....#
#######
예제 출력 3 
5
예제 입력 4 
10 10
##########
#R#...##B#
#...#.##.#
#####.##.#
#......#.#
#.######.#
#.#....#.#
#.#.#.#..#
#...#.O#.#
##########
예제 출력 4 
-1
예제 입력 5 
3 7
#######
#R.O.B#
#######
예제 출력 5 
1
예제 입력 6 
10 10
##########
#R#...##B#
#...#.##.#
#####.##.#
#......#.#
#.######.#
#.#....#.#
#.#.##...#
#O..#....#
##########
예제 출력 6 
7
예제 입력 7 
3 10
##########
#.O....RB#
##########
예제 출력 7 
-1
	*/
	struct bead{	//구슬의 위치
		int ry, rx;
		int by, bx;
		int tilt;	//기울인 횟수
	};
	int N, M;
	std::pair<int, int> dir[4] = { {-1,0},{0,1},{1,0},{0,-1} };	//북쪽부터 시계방향
	char** map;	//기본 지도
	bool**** visited;	//방문 여부 3차원 배열로 해도 상관 없는데 그냥 귀찮아서 4차원 배열로 박았다
	std::queue<bead> q;	//BFS를 수행하기 위한 queue


	
public:
	void run();
	void BFS();
	void move(int& y, int& x, int& t, int& i);
private:
	void show(bead& b);
};
class {

};